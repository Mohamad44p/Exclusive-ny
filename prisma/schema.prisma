generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @map("_id")
  email     String
  firstName String
  lastName  String
  imageUrl  String?
  userName  String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  orders    Order[]
  favorites Favorite[]
}

model Product {
  id                     String                 @id @default(uuid()) @map("_id")
  name                   String
  price                  Int
  filePath               String
  imagePath              String
  description            String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orders                 Order[]
  downloadVerifications  DownloadVerification[]
  Favorite               Favorite[]
  categories             CategoryProduct[]
}

model Order {
  id        String   @id @default(uuid()) @map("_id")
  pricePaid Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model DownloadVerification {
  id        String   @id @default(uuid()) @map("_id")
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id        String            @id @default(uuid()) @map("_id")
  name      String
  createdAt DateTime          @default(now())
  products  CategoryProduct[]
}

model CategoryProduct {
  id         String   @id @default(uuid()) @map("_id")
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}
